IFT 383 Fall 2019 Term BExtra Credit AssignmentByEric Richmann
	For this extra credit assignment, I decided to create a hangman application by using the programming language Python. Before I started to code the actual program, I created a file named dictionary.txt that contains a list of over 58,000 words (58,110 to be exact). These words will be used to create a “secret word” that the player is attempting to guess. I then used the random module to create a number between 0 and 58,110, each number representing a line in the dictionary.txt file and its corresponding word. 	      When the program is ran, the player will be asked for their name and then a greeting with the players name will be printed. They will then be given an opportunity to guess a letter of the secret word. If they guess wrong, it will be considered a failed attempt. Each time the program is ran, a player will only have 10 failed attempts. Once that is reached, it is game over. If they guess correctly, the program will continue to run with no failed attempts. If the player guesses all of the correct letters (thus completing the word), then they have won.       My process for writing this script was quite simple. As I previously mentioned, I first created a .txt file that would contain all of the words that could be the secret word. Once that was done, I started the actual script. I wrote this script using what I thought of as the “order of operations” which is logical step process of how the program should run. First was determining the word. To do that, I would need to open the dictionary.txt file and then use the random module (randint to be exact) to create a random number that would represent the line number and corresponding word. Once that was done, I wanted to make the script more personable and ask for and then display the players name. I could have chosen any number of attempts to give the player when the incorrectly guess the letter, but I thought 10 was a good and round number of attempts to give the player.       I then decided to use a while loop that would run as long as the players turn was greater than 0. I used a decrementer although I could have used an incrementor and done a while loop that would run as long as the players turn was less than 10. I thought though that the first way would be the easiest to code and understand. In that while loop, I created a counter that would count the number of times the player failed and then utilized a for loop to run to check if the character is in the secret word. If it was, it would print the correct letter and not increment the fail. If guessed incorrectly it would increment the fail and continue to print dashes that represented the number of letters in the word. I then used an if statement that would tell the player if they had won if the fail was equal to 0.       I used raw_input to ask the player to continue to enter a guess and then would increment the guesses. I did use the string method lower() to turn all input into lower case letters in case the player inputted a capitalized letter as all the words in the dictionary are lowercase. I was considering if I should put in a way to check if the player inputted anything other than a letter (like a number or special character) but decided it would be easier to keep the code as is and if a player did input something other than a letter it would count as a failed attempt. An if statement was then used for when the players guess was not in the word. The turn would then be decremented by 1. It will then display to the player how many guesses they have left. If their turn became equal to 0, they would lose.       To test my script, I ran it in many different scenarios such as entering uppercase letters, numbers and special characters. As I previously mentioned, it made more sense to count incorrect input as a failed attempt except for upper case letter input. In total, I tested my script around 30 times just to make sure it was working correctly. As I was coding it though, I did test it a lot more by commenting out sections to debug any issues that I ran into. I did run into two problems in particular that were troublesome. First, was reading the dictionary.txt file and second was using the “print char, “. As far as the dictionary.txt file went, I spent some time researching different ways to read files and came across one that seemed easier to code than the others. For the “print char,” I had to use a Python forum and get some pointers from other programmers to solve that issue.       If I could go back and give advice to myself when I started the assignment, I would say systematically problem solve. In other words, attempt to pinpoint the problem precisely, and then on paper break the problem down instead of staring at the code to try to see if the problem/solution would just “pop out”. That would have saved me a bit of time. 